[{"C:\\Users\\RITIKA\\Music\\react_qrcode_generation_scanner\\src\\index.js":"1","C:\\Users\\RITIKA\\Music\\react_qrcode_generation_scanner\\src\\App.js":"2","C:\\Users\\RITIKA\\Music\\react_qrcode_generation_scanner\\src\\reportWebVitals.js":"3"},{"size":517,"mtime":1619593567414,"results":"4","hashOfConfig":"5"},{"size":8718,"mtime":1619625297804,"results":"6","hashOfConfig":"5"},{"size":375,"mtime":1619593567416,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1gfygn0",{"filePath":"11","messages":"12","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":3,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\RITIKA\\Music\\react_qrcode_generation_scanner\\src\\index.js",[],["17","18"],"C:\\Users\\RITIKA\\Music\\react_qrcode_generation_scanner\\src\\App.js",["19","20","21","22","23"],"import React, {useState, useRef,useEffect} from 'react';\r\nimport {Container, Card, CardContent, makeStyles, Grid, TextField, Button} from '@material-ui/core';\r\nimport QRCode from 'qrcode';\r\nimport QrReader from 'react-qr-reader';\r\nconst axios = require('axios')\r\n\r\n\r\n\r\nfunction App() { \r\n  const [text, setText] = useState('');\r\n  const [offerNum,setOfferNum] = useState(\"\");\r\n  const [imageUrl, setImageUrl] = useState('');\r\n  const [scanResultFile, setScanResultFile] = useState('');\r\n  const [scanResultWebCam, setScanResultWebCam] =  useState('');\r\n  const classes = useStyles();\r\n  const qrRef = useRef(null);\r\n  const [allUsers,setAllUsers] = useState(\"\")\r\n  const [offerArray,setOfferArray] = useState([0,0,0,0])\r\n  const [num,setNum] = useState(\"\")\r\n  const [disableButtons,setDisableButtons] = useState({first : false, second : false ,  third : false , fourth : false})\r\n\r\n  const {first,second,third,fourth} = disableButtons\r\n\r\n  useEffect(() => { fetch(\"http://localhost:8080/api/getAllUsers\").\r\n  then(res => { return  res.json()   } ).\r\n  then(res => { setAllUsers(res) } ).\r\n  catch(err => {console.log(err)}  )   } , []  )\r\n\r\n\r\n  const generateQrCode = async (num) => {\r\n    setNum(num)\r\n\r\n    if(text){\r\n      setOfferNum(num)\r\n    try {\r\n          const response = await QRCode.toDataURL(\"\" + num);\r\n          setImageUrl(response);\r\n          \r\n\r\n    }catch (error) {\r\n      console.log(error);\r\n    }\r\n    }\r\n  }\r\n  const handleErrorFile = (error) => {\r\n    console.log(error);\r\n  }\r\n  const handleScanFile = (result) => {\r\n    if(num === 1){\r\n      let temp = [...offerArray];\r\n      temp[0] = temp[0] + 1\r\n      callApi(temp , num);\r\n      console.log(\"Temp\",temp);\r\n            setOfferArray(temp)\r\n      console.log(\"TESTING\",offerArray)\r\n      setDisableButtons({...disableButtons, first : true})\r\n    }\r\n    if(num === 2){\r\n     let temp = [...offerArray];\r\n     temp[1] = temp[1] + 1\r\n     callApi(temp, num);\r\n     console.log(\"Temp\",temp);\r\n     setOfferArray(temp)\r\n     console.log(\"TESTING\",offerArray)\r\n     setDisableButtons({...disableButtons, second : true})\r\n      }\r\n      if(num === 3){\r\n       let temp = [...offerArray];\r\n       temp[2] = temp[2] + 1\r\n       callApi(temp, num);\r\n       console.log(\"Temp\",temp);\r\n       setOfferArray(temp)\r\n       setDisableButtons({...disableButtons, third : true})\r\n        }\r\n        if(num === 4){\r\n         let temp = [...offerArray];\r\n         temp[3] = temp[3] + 1\r\n         callApi(temp, num);\r\n         console.log(\"Temp\",temp);\r\n         setOfferArray(temp)\r\n         setDisableButtons({...disableButtons, fourth : true})\r\n     \r\n          }\r\n      if (result) {     \r\n          setScanResultFile(result);\r\n\r\n          // setTimeout( () => {\r\n          //   axios.post(\"http://localhost:8080/api/create/user\" , {\r\n          //     name : text,\r\n          //     offers : offerArray\r\n          //   } ).then(function (response) {\r\n          //     console.log(\"Response from the backend\",response.data);\r\n          //   })\r\n          // } , 3000 )\r\n       \r\n      }\r\n      function callApi(temp, no){\r\n        axios.post(\"http://localhost:8080/api/create/user\" , {\r\n          name : text,\r\n          offers : temp\r\n        } ).then(function (response) {\r\n          console.log(\"Response from the backend\",response.data);\r\n        })\r\n      }\r\n  }\r\n  const onScanFile = () => {\r\n    qrRef.current.openImageDialog();\r\n  }\r\n\r\n  return (\r\n    <Container className={classes.conatiner}>\r\n          <Card>\r\n              <h2 className={classes.title}>Enter your name and click on avail offer download Qr code and scan it to avail offers</h2>\r\n              <CardContent>\r\n                  <Grid container spacing={2}>\r\n                      <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n                        <h3>Enter your name here to avail offers</h3>\r\n                          <TextField label=\"Enter Your Name\" onChange={(e) => setText(e.target.value)}/>\r\n                          <br></br>\r\n                          <br></br>\r\n                          <Button disabled= {first}  className={classes.btn} variant=\"contained\" \r\n                            color=\"primary\" onClick={() => { \r\n                              if(!text){\r\n                                alert(\"Enter Name to user Offers\")\r\n                              }\r\n                              generateQrCode(1)} } >Avail offer 1</Button>\r\n                            <br></br>\r\n                                    <Button disabled= {second} className={classes.btn} variant=\"contained\" \r\n                            color=\"primary\" onClick={() => { \r\n                              if(!text){\r\n                                alert(\"Enter Name to user Offers\")\r\n                              }\r\n                              generateQrCode(2) }}>Avail offer 2</Button>\r\n                             <br></br>\r\n                             <Button disabled= {third} className={classes.btn} variant=\"contained\" \r\n                            color=\"primary\" onClick={() =>  {\r\n                              if(!text){\r\n                                alert(\"Enter Name to user Offers\")\r\n                              }\r\n                              generateQrCode(3) }}>Avail offer 3</Button>\r\n                             <br></br>\r\n                                    <Button disabled= {fourth} className={classes.btn} variant=\"contained\" \r\n                            color=\"primary\" onClick={() => {\r\n                              if(!text){\r\n                                alert(\"Enter Name to user Offers\")\r\n                              }\r\n                              generateQrCode(4)}}>Avail offer 4</Button>\r\n                           {JSON.stringify(offerArray)}\r\n                            {imageUrl ? (\r\n                              <>\r\n                              \r\n                             \r\n                              <h1>Qr code for offer {offerNum} </h1>\r\n                              <a   href={imageUrl} download>\r\n                                  <img src={imageUrl} alt=\"img\"/>\r\n                              </a>\r\n                            <p>Click on Qr Code to download it</p>\r\n                              </> ) : \"\"}\r\n                      </Grid>\r\n                      <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n                        <Button style={{textAlign : \"center\"}} className={classes.btn} variant=\"contained\" color=\"secondary\" onClick={onScanFile}>Scan Qr Code</Button>\r\n                        <QrReader\r\n                          ref={qrRef}\r\n                          delay={300}\r\n                          style={{width: '100%'}}\r\n                          onError={handleErrorFile}\r\n                          onScan={handleScanFile}\r\n                          legacyMode\r\n                        />\r\n                        <h3 style={{textAlign : \"center\"}}   > {scanResultFile ? `Offer ${offerNum} used By ${text}` : \"\"}   </h3>\r\n                      </Grid>\r\n                      <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>      \r\n                        <h3 style={{textAlign : \"center\"}} >Admin Dashboard {scanResultFile}</h3>\r\n                        <h4 style ={{textAlign : \"center\"}}>Offers used by users</h4>\r\n                        <br></br>\r\n                        <div  style ={{textAlign : \"center\"}} >\r\n                           { allUsers ?   allUsers.map( (user,index) => {\r\n                            return (\r\n                              <>\r\n                              <p>  <span style={{ fontWeight : \"bold\" }} > {index + 1}. </span> Name : {user.name}</p> \r\n                              <p>No of time offer used</p>\r\n                              <p>First offer  : {user.offers[0]} </p>\r\n                              <p>Second offer  : {user.offers[1]} </p>\r\n                              <p>Third offer  : {user.offers[2]} </p>\r\n                              <p>Fourth offer  : {user.offers[3]} </p>\r\n                              <br></br>\r\n                              </>\r\n                              )\r\n                          }  ) : \"\" }\r\n                        \r\n                        </div>\r\n                      </Grid>\r\n                  \r\n                  </Grid>\r\n              </CardContent>\r\n          </Card>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    conatiner: {\r\n      marginTop: 10,\r\n      height : \"50%\"\r\n    },\r\n    title: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems:  'center',\r\n      background: '#3f51b5',\r\n      color: '#fff',\r\n      padding: 20\r\n    },\r\n    btn : {\r\n      marginTop: 5,\r\n      marginBottom: 10\r\n    }\r\n}));\r\nexport default App;\r\n","C:\\Users\\RITIKA\\Music\\react_qrcode_generation_scanner\\src\\reportWebVitals.js",[],["24","25"],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":14,"column":10,"nodeType":"32","messageId":"33","endLine":14,"endColumn":26},{"ruleId":"30","severity":1,"message":"34","line":14,"column":28,"nodeType":"32","messageId":"33","endLine":14,"endColumn":47},{"ruleId":"35","severity":1,"message":"36","line":24,"column":67,"nodeType":"37","messageId":"38","endLine":24,"endColumn":68,"fix":"39"},{"ruleId":"35","severity":1,"message":"36","line":25,"column":41,"nodeType":"37","messageId":"38","endLine":25,"endColumn":42,"fix":"40"},{"ruleId":"35","severity":1,"message":"36","line":26,"column":37,"nodeType":"37","messageId":"38","endLine":26,"endColumn":38,"fix":"41"},{"ruleId":"26","replacedBy":"42"},{"ruleId":"28","replacedBy":"43"},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'scanResultWebCam' is assigned a value but never used.","Identifier","unusedVar","'setScanResultWebCam' is assigned a value but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"46","text":"47"},{"range":"48","text":"47"},{"range":"49","text":"47"},["44"],["45"],"no-global-assign","no-unsafe-negation",[1004,1009],"\r\n  .",[1047,1052],[1086,1091]]